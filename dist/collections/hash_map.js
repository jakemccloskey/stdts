"use strict";
const empty_1 = require('../empty');
const option_1 = require('../option');
function* drainIterator(hashMap) {
    const entries = Array.from(hashMap);
    hashMap.clear();
    for (const entry of entries) {
        yield entry;
    }
}
class HashMapImpl extends empty_1.default {
    constructor(iterator) {
        super();
        this.inner = new Map();
        if (iterator !== undefined) {
            this.inner = new Map(iterator);
        }
    }
    keys() {
        return this.inner.keys();
    }
    values() {
        return this.inner.values();
    }
    len() {
        return this.inner.size;
    }
    isEmpty() {
        return this.len() === 0;
    }
    drain() {
        return drainIterator(this);
    }
    clear() {
        this.inner.clear();
    }
    get(key) {
        if (!this.inner.has(key)) {
            return option_1.None();
        }
        return option_1.Some(this.inner.get(key));
    }
    containsKey(key) {
        return this.inner.has(key);
    }
    insert(key, value) {
        let result = option_1.None();
        if (this.containsKey(key)) {
            result = option_1.Some(this.get(key).unwrap());
        }
        this.inner.set(key, value);
        return result;
    }
    remove(key) {
        const result = this.get(key);
        this.inner.delete(key);
        return result;
    }
    [Symbol.iterator]() {
        return this.inner.entries();
    }
}
function HashMap(iterator) {
    return new HashMapImpl(iterator);
}
exports.HashMap = HashMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9tYXAuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy9oYXNoX21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsd0JBQWtCLFVBQVUsQ0FBQyxDQUFBO0FBQzdCLHlCQUFpQyxXQUFXLENBQUMsQ0FBQTtBQWdCN0Msd0JBQThCLE9BQTBCO0lBQ3BELE1BQU0sT0FBTyxHQUFrQixLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRW5ELE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUVoQixHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQzFCLE1BQU0sS0FBSyxDQUFDO0lBQ2hCLENBQUM7QUFDTCxDQUFDO0FBRUQsMEJBQWdDLGVBQUs7SUFHakMsWUFBWSxRQUFtQztRQUMzQyxPQUFPLENBQUM7UUFISixVQUFLLEdBQWMsSUFBSSxHQUFHLEVBQVEsQ0FBQztRQUt2QyxFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFPLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDTCxDQUFDO0lBRU0sSUFBSTtRQUNQLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTSxNQUFNO1FBQ1QsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVNLEdBQUc7UUFDTixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDM0IsQ0FBQztJQUVNLE9BQU87UUFDVixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRU0sS0FBSztRQUNSLE1BQU0sQ0FBQyxhQUFhLENBQU8sSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBTTtRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxhQUFJLEVBQUssQ0FBQztRQUNyQixDQUFDO1FBRUQsTUFBTSxDQUFDLGFBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQU0sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTSxXQUFXLENBQUMsR0FBTTtRQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFNLEVBQUUsS0FBUTtRQUMxQixJQUFJLE1BQU0sR0FBYyxhQUFJLEVBQUssQ0FBQztRQUVsQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QixNQUFNLEdBQUcsYUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMxQyxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFNO1FBQ2hCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdkIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLENBQUM7QUFFTCxDQUFDO0FBRUQsaUJBQThCLFFBQW1DO0lBQzdELE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBTyxRQUFRLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRmUsZUFBTyxVQUV0QixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEVtcHR5IGZyb20gJy4uL2VtcHR5JztcbmltcG9ydCB7T3B0aW9uLCBTb21lLCBOb25lfSBmcm9tICcuLi9vcHRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hNYXA8SywgVj4gZXh0ZW5kcyBFbXB0eSB7XG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+O1xuICAgIHZhbHVlcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFY+O1xuICAgIGxlbigpOiBudW1iZXI7XG4gICAgaXNFbXB0eSgpOiBib29sZWFuO1xuICAgIGRyYWluKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPjtcbiAgICBjbGVhcigpOiB2b2lkO1xuICAgIGdldChrZXk6IEspOiBPcHRpb248Vj47XG4gICAgY29udGFpbnNLZXkoa2V5OiBLKTogYm9vbGVhbjtcbiAgICBpbnNlcnQoa2V5OiBLLCB2YWw6IFYpOiBPcHRpb248Vj47XG4gICAgcmVtb3ZlKGtleTogSyk6IE9wdGlvbjxWPjtcbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFtLLCBWXT47XG59XG5cbmZ1bmN0aW9uKiBkcmFpbkl0ZXJhdG9yPEssIFY+KGhhc2hNYXA6IEhhc2hNYXBJbXBsPEssIFY+KTogSXRlcmFibGVJdGVyYXRvcjxbSywgVl0+IHtcbiAgICBjb25zdCBlbnRyaWVzOiBBcnJheTxbSywgVl0+ID0gQXJyYXkuZnJvbShoYXNoTWFwKTtcblxuICAgIGhhc2hNYXAuY2xlYXIoKTtcblxuICAgIGZvciAoY29uc3QgZW50cnkgb2YgZW50cmllcykge1xuICAgICAgICB5aWVsZCBlbnRyeTtcbiAgICB9XG59XG5cbmNsYXNzIEhhc2hNYXBJbXBsPEssIFY+IGV4dGVuZHMgRW1wdHkgaW1wbGVtZW50cyBIYXNoTWFwPEssIFY+IHtcbiAgICBwcml2YXRlIGlubmVyOiBNYXA8SywgVj4gPSBuZXcgTWFwPEssIFY+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihpdGVyYXRvcj86IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPikge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIGlmIChpdGVyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gbmV3IE1hcDxLLCBWPihpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXIua2V5cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLnZhbHVlcygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsZW4oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXIuc2l6ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuKCkgPT09IDA7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYWluKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPiB7XG4gICAgICAgIHJldHVybiBkcmFpbkl0ZXJhdG9yPEssIFY+KHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5pbm5lci5jbGVhcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBLKTogT3B0aW9uPFY+IHtcbiAgICAgICAgaWYgKCF0aGlzLmlubmVyLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gTm9uZTxWPigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNvbWUodGhpcy5pbm5lci5nZXQoa2V5KSBhcyBWKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udGFpbnNLZXkoa2V5OiBLKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbnNlcnQoa2V5OiBLLCB2YWx1ZTogVik6IE9wdGlvbjxWPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IE9wdGlvbjxWPiA9IE5vbmU8Vj4oKTtcblxuICAgICAgICBpZiAodGhpcy5jb250YWluc0tleShrZXkpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBTb21lKHRoaXMuZ2V0KGtleSkudW53cmFwKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbm5lci5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZShrZXk6IEspOiBPcHRpb248Vj4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldChrZXkpO1xuICAgICAgICB0aGlzLmlubmVyLmRlbGV0ZShrZXkpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLmVudHJpZXMoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhhc2hNYXA8SywgVj4oaXRlcmF0b3I/OiBJdGVyYWJsZUl0ZXJhdG9yPFtLLCBWXT4pOiBIYXNoTWFwPEssIFY+IHtcbiAgICByZXR1cm4gbmV3IEhhc2hNYXBJbXBsPEssIFY+KGl0ZXJhdG9yKTtcbn1cbiJdfQ==