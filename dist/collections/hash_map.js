"use strict";
const option_1 = require('../option');
function* drainIterator(hashMap) {
    const entries = Array.from(hashMap);
    hashMap.clear();
    for (const entry of entries) {
        yield entry;
    }
}
class HashMapImpl {
    constructor(iterator) {
        this.inner = new Map();
        if (iterator !== undefined) {
            this.inner = new Map(iterator);
        }
    }
    keys() {
        return this.inner.keys();
    }
    values() {
        return this.inner.values();
    }
    len() {
        return this.inner.size;
    }
    isEmpty() {
        return this.len() === 0;
    }
    drain() {
        return drainIterator(this);
    }
    clear() {
        this.inner.clear();
    }
    get(key) {
        if (!this.inner.has(key)) {
            return option_1.None();
        }
        return option_1.Some(this.inner.get(key));
    }
    containsKey(key) {
        return this.inner.has(key);
    }
    insert(key, value) {
        let result = option_1.None();
        if (this.containsKey(key)) {
            result = option_1.Some(this.get(key).unwrap());
        }
        this.inner.set(key, value);
        return result;
    }
    remove(key) {
        const result = this.get(key);
        this.inner.delete(key);
        return result;
    }
    [Symbol.iterator]() {
        return this.inner.entries();
    }
}
function HashMap(iterator) {
    return new HashMapImpl(iterator);
}
exports.HashMap = HashMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF9tYXAuanMiLCJzb3VyY2VSb290IjoiLi9zcmMvIiwic291cmNlcyI6WyJjb2xsZWN0aW9ucy9oYXNoX21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEseUJBQWlDLFdBQVcsQ0FBQyxDQUFBO0FBZ0I3Qyx3QkFBOEIsT0FBMEI7SUFDcEQsTUFBTSxPQUFPLEdBQWtCLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbkQsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBRWhCLEdBQUcsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxLQUFLLENBQUM7SUFDaEIsQ0FBQztBQUNMLENBQUM7QUFFRDtJQUdJLFlBQVksUUFBbUM7UUFGdkMsVUFBSyxHQUFjLElBQUksR0FBRyxFQUFRLENBQUM7UUFHdkMsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBTyxRQUFRLENBQUMsQ0FBQztRQUN6QyxDQUFDO0lBQ0wsQ0FBQztJQUVNLElBQUk7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTTtRQUNULE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQy9CLENBQUM7SUFFTSxHQUFHO1FBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFTSxPQUFPO1FBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVNLEtBQUs7UUFDUixNQUFNLENBQUMsYUFBYSxDQUFPLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxLQUFLO1FBQ1IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQU07UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QixNQUFNLENBQUMsYUFBSSxFQUFLLENBQUM7UUFDckIsQ0FBQztRQUVELE1BQU0sQ0FBQyxhQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFNLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sV0FBVyxDQUFDLEdBQU07UUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBTSxFQUFFLEtBQVE7UUFDMUIsSUFBSSxNQUFNLEdBQWMsYUFBSSxFQUFLLENBQUM7UUFFbEMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEIsTUFBTSxHQUFHLGFBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxNQUFNLENBQUMsR0FBTTtRQUNoQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXZCLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDbEIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0FBRUwsQ0FBQztBQUVELGlCQUE4QixRQUFtQztJQUM3RCxNQUFNLENBQUMsSUFBSSxXQUFXLENBQU8sUUFBUSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUZlLGVBQU8sVUFFdEIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T3B0aW9uLCBTb21lLCBOb25lfSBmcm9tICcuLi9vcHRpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hNYXA8SywgVj4ge1xuICAgIGtleXMoKTogSXRlcmFibGVJdGVyYXRvcjxLPjtcbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPjtcbiAgICBsZW4oKTogbnVtYmVyO1xuICAgIGlzRW1wdHkoKTogYm9vbGVhbjtcbiAgICBkcmFpbigpOiBJdGVyYWJsZUl0ZXJhdG9yPFtLLCBWXT47XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICBnZXQoa2V5OiBLKTogT3B0aW9uPFY+O1xuICAgIGNvbnRhaW5zS2V5KGtleTogSyk6IGJvb2xlYW47XG4gICAgaW5zZXJ0KGtleTogSywgdmFsOiBWKTogT3B0aW9uPFY+O1xuICAgIHJlbW92ZShrZXk6IEspOiBPcHRpb248Vj47XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxbSywgVl0+O1xufVxuXG5mdW5jdGlvbiogZHJhaW5JdGVyYXRvcjxLLCBWPihoYXNoTWFwOiBIYXNoTWFwSW1wbDxLLCBWPik6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPiB7XG4gICAgY29uc3QgZW50cmllczogQXJyYXk8W0ssIFZdPiA9IEFycmF5LmZyb20oaGFzaE1hcCk7XG5cbiAgICBoYXNoTWFwLmNsZWFyKCk7XG5cbiAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpIHtcbiAgICAgICAgeWllbGQgZW50cnk7XG4gICAgfVxufVxuXG5jbGFzcyBIYXNoTWFwSW1wbDxLLCBWPiBpbXBsZW1lbnRzIEhhc2hNYXA8SywgVj4ge1xuICAgIHByaXZhdGUgaW5uZXI6IE1hcDxLLCBWPiA9IG5ldyBNYXA8SywgVj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdG9yPzogSXRlcmFibGVJdGVyYXRvcjxbSywgVl0+KSB7XG4gICAgICAgIGlmIChpdGVyYXRvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmlubmVyID0gbmV3IE1hcDxLLCBWPihpdGVyYXRvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXIua2V5cygpO1xuICAgIH1cblxuICAgIHB1YmxpYyB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLnZhbHVlcygpO1xuICAgIH1cblxuICAgIHB1YmxpYyBsZW4oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXIuc2l6ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGVuKCkgPT09IDA7XG4gICAgfVxuXG4gICAgcHVibGljIGRyYWluKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPiB7XG4gICAgICAgIHJldHVybiBkcmFpbkl0ZXJhdG9yPEssIFY+KHRoaXMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5pbm5lci5jbGVhcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQoa2V5OiBLKTogT3B0aW9uPFY+IHtcbiAgICAgICAgaWYgKCF0aGlzLmlubmVyLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gTm9uZTxWPigpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNvbWUodGhpcy5pbm5lci5nZXQoa2V5KSBhcyBWKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29udGFpbnNLZXkoa2V5OiBLKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLmhhcyhrZXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbnNlcnQoa2V5OiBLLCB2YWx1ZTogVik6IE9wdGlvbjxWPiB7XG4gICAgICAgIGxldCByZXN1bHQ6IE9wdGlvbjxWPiA9IE5vbmU8Vj4oKTtcblxuICAgICAgICBpZiAodGhpcy5jb250YWluc0tleShrZXkpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBTb21lKHRoaXMuZ2V0KGtleSkudW53cmFwKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbm5lci5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZShrZXk6IEspOiBPcHRpb248Vj4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldChrZXkpO1xuICAgICAgICB0aGlzLmlubmVyLmRlbGV0ZShrZXkpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8W0ssIFZdPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmlubmVyLmVudHJpZXMoKTtcbiAgICB9XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEhhc2hNYXA8SywgVj4oaXRlcmF0b3I/OiBJdGVyYWJsZUl0ZXJhdG9yPFtLLCBWXT4pOiBIYXNoTWFwPEssIFY+IHtcbiAgICByZXR1cm4gbmV3IEhhc2hNYXBJbXBsPEssIFY+KGl0ZXJhdG9yKTtcbn1cbiJdfQ==