"use strict";
const option_1 = require('./option');
function* errIterator() { }
class ErrImpl {
    constructor(value) {
        this.kind = 'err';
        this.value = value;
    }
    unwrapErr(msg) {
        return this.value;
    }
    unwrap(msg) {
        throw new Error(msg ? msg + ':' : '');
    }
    isOk() {
        return false;
    }
    isErr() {
        return true;
    }
    ok() {
        return option_1.None();
    }
    err() {
        return option_1.Some(this.value);
    }
    map(f) {
        return Err(this.value);
    }
    mapErr(f) {
        return Err(f(this.value));
    }
    and(res) {
        return Err(this.value);
    }
    andThen(f) {
        return Err(this.value);
    }
    or(res) {
        return res;
    }
    orElse(f) {
        return f(this.value);
    }
    unwrapOr(optb) {
        return optb;
    }
    unwrapOrElse(f) {
        return f(this.value);
    }
    [Symbol.iterator]() {
        return errIterator();
    }
}
function Err(value) {
    return new ErrImpl(value);
}
exports.Err = Err;
function* okIterator(v) {
    yield v;
}
class OkImpl {
    constructor(value) {
        this.kind = 'ok';
        this.value = value;
    }
    unwrapErr(msg) {
        throw new Error(msg ? msg + ':' : '');
    }
    unwrap(msg) {
        return this.value;
    }
    isOk() {
        return true;
    }
    isErr() {
        return false;
    }
    ok() {
        return option_1.Some(this.value);
    }
    err() {
        return option_1.None();
    }
    map(f) {
        return Ok(f(this.value));
    }
    mapErr(f) {
        return Ok(this.value);
    }
    and(res) {
        return res;
    }
    andThen(f) {
        return f(this.value);
    }
    or(res) {
        return Ok(this.value);
    }
    orElse(f) {
        return Ok(this.value);
    }
    unwrapOr(optb) {
        return this.value;
    }
    unwrapOrElse(f) {
        return this.value;
    }
    [Symbol.iterator]() {
        return okIterator(this.value);
    }
}
function Ok(value) {
    return new OkImpl(value);
}
exports.Ok = Ok;
//# sourceMappingURL=data:application/json;base64,