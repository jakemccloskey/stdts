"use strict";
const result_1 = require('./result');
function* noneIterator() { }
class NoneImpl {
    constructor() {
        this.kind = 'none';
    }
    isSome() {
        return false;
    }
    isNone() {
        return true;
    }
    unwrap(msg) {
        throw new Error(msg ? msg + ':' : '');
    }
    unwrapOr(def) {
        return def;
    }
    unwrapOrElse(f) {
        return f();
    }
    map(f) {
        return None();
    }
    mapOr(def, f) {
        return def;
    }
    mapOrElse(def, f) {
        return def();
    }
    okOr(err) {
        return result_1.Err(err);
    }
    okOrElse(err) {
        return result_1.Err(err());
    }
    and(optb) {
        return None();
    }
    andThen(f) {
        return None();
    }
    or(optb) {
        return optb;
    }
    orElse(f) {
        return f();
    }
    [Symbol.iterator]() {
        return noneIterator();
    }
}
function None() {
    return new NoneImpl();
}
exports.None = None;
function* someIterator(v) {
    yield v;
}
class SomeImpl {
    constructor(value) {
        this.kind = 'some';
        this.value = value;
    }
    isSome() {
        return true;
    }
    isNone() {
        return false;
    }
    unwrap() {
        return this.value;
    }
    unwrapOr(def) {
        return this.value;
    }
    unwrapOrElse(f) {
        return this.value;
    }
    map(f) {
        return Some(f(this.value));
    }
    mapOr(def, f) {
        return f(this.value);
    }
    mapOrElse(def, f) {
        return f(this.value);
    }
    okOr(err) {
        return result_1.Ok(this.value);
    }
    okOrElse(err) {
        return result_1.Ok(this.value);
    }
    and(optb) {
        return optb;
    }
    andThen(f) {
        return f(this.value);
    }
    or(optb) {
        return this;
    }
    orElse(f) {
        return this;
    }
    [Symbol.iterator]() {
        return someIterator(this.value);
    }
}
function Some(value) {
    return new SomeImpl(value);
}
exports.Some = Some;
//# sourceMappingURL=data:application/json;base64,